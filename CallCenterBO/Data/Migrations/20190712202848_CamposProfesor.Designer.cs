// <auto-generated />
using System;
using CallCenterBO.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CallCenterBO.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190712202848_CamposProfesor")]
    partial class CamposProfesor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Alumno", b =>
                {
                    b.Property<Guid>("IdAlumno")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("FechaDeAlta");

                    b.Property<DateTime?>("FechaDeBaja");

                    b.Property<Guid?>("IdEmpresa");

                    b.Property<Guid?>("IdNivel");

                    b.Property<Guid>("IdPlan");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Timetable");

                    b.HasKey("IdAlumno");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdNivel");

                    b.HasIndex("IdPlan");

                    b.ToTable("Alumnos");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.CancelacionDisponibilidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaDeInicio");

                    b.Property<DateTime?>("FechaFin");

                    b.Property<Guid>("IdTipoDeCancelacion");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDeCancelacion");

                    b.ToTable("CancelacionesDisponibilidad");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Clase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FechaHoraFin");

                    b.Property<DateTime>("FechaHoraInicio");

                    b.Property<Guid>("IdAlumno");

                    b.Property<Guid>("IdDuracion");

                    b.Property<Guid>("IdLinea");

                    b.Property<Guid>("IdProfesor");

                    b.Property<Guid?>("IdTipoDeIncidencia");

                    b.Property<Guid>("IdTopic");

                    b.HasKey("Id");

                    b.HasIndex("IdAlumno");

                    b.HasIndex("IdDuracion");

                    b.HasIndex("IdLinea");

                    b.HasIndex("IdProfesor");

                    b.HasIndex("IdTipoDeIncidencia");

                    b.HasIndex("IdTopic");

                    b.ToTable("Clases");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Disponibilidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AusenciaTemporal");

                    b.Property<Guid?>("CancelacionDisponibilidadId");

                    b.Property<string>("Dia");

                    b.Property<DateTime>("HoraFin");

                    b.Property<DateTime>("HoraInicio");

                    b.Property<Guid?>("IdCancelacion");

                    b.Property<Guid?>("IdLinea");

                    b.Property<Guid>("IdProfesor");

                    b.HasKey("Id");

                    b.HasIndex("CancelacionDisponibilidadId");

                    b.HasIndex("IdLinea");

                    b.HasIndex("IdProfesor");

                    b.ToTable("Disponibilidades");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Duracion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Duraciones");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Empresa", b =>
                {
                    b.Property<Guid>("IdEmpresa")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("IdEmpresa");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.EmpresaProfesor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EmpresasProfesor");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Linea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<DateTime>("FechaDeAlta");

                    b.Property<DateTime?>("FechaDeBaja");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("Numero");

                    b.HasKey("Id");

                    b.ToTable("Lineas");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Nivel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Niveles");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Profesor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FechaDeAlta");

                    b.Property<DateTime?>("FechaDeBaja");

                    b.Property<Guid?>("IdEmpresaProfesor");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresaProfesor");

                    b.ToTable("Profesores");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.SemanaTopics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Anho");

                    b.Property<int>("NumSemana");

                    b.HasKey("Id");

                    b.ToTable("SemanasTopics");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.TipoDeCancelacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TiposDeCancelacion");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.TipoDeIncidencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TiposDeIncidencia");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.TopicSemanaTopics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdSemanaTopics");

                    b.Property<Guid>("IdTopic");

                    b.HasKey("Id");

                    b.HasIndex("IdSemanaTopics");

                    b.HasIndex("IdTopic");

                    b.ToTable("TopicsSemanasTopics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Alumno", b =>
                {
                    b.HasOne("CallCenterBO.Data.Entidades.Empresa", "Empresa")
                        .WithMany("Alumnos")
                        .HasForeignKey("IdEmpresa");

                    b.HasOne("CallCenterBO.Data.Entidades.Nivel", "Nivel")
                        .WithMany("Alumnos")
                        .HasForeignKey("IdNivel");

                    b.HasOne("CallCenterBO.Data.Entidades.Plan", "Plan")
                        .WithMany("Alumnos")
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.CancelacionDisponibilidad", b =>
                {
                    b.HasOne("CallCenterBO.Data.Entidades.TipoDeCancelacion", "TipoDeCancelacion")
                        .WithMany("Cancelaciones")
                        .HasForeignKey("IdTipoDeCancelacion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Clase", b =>
                {
                    b.HasOne("CallCenterBO.Data.Entidades.Alumno", "Alumno")
                        .WithMany("ClasesDadas")
                        .HasForeignKey("IdAlumno")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallCenterBO.Data.Entidades.Duracion", "Duracion")
                        .WithMany("Clases")
                        .HasForeignKey("IdDuracion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallCenterBO.Data.Entidades.Linea", "Linea")
                        .WithMany("Clases")
                        .HasForeignKey("IdLinea")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallCenterBO.Data.Entidades.Profesor", "Profesor")
                        .WithMany("ClasesDadas")
                        .HasForeignKey("IdProfesor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallCenterBO.Data.Entidades.TipoDeIncidencia", "TipoDeIncidencia")
                        .WithMany("Clases")
                        .HasForeignKey("IdTipoDeIncidencia");

                    b.HasOne("CallCenterBO.Data.Entidades.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("IdTopic")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Disponibilidad", b =>
                {
                    b.HasOne("CallCenterBO.Data.Entidades.CancelacionDisponibilidad")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("CancelacionDisponibilidadId");

                    b.HasOne("CallCenterBO.Data.Entidades.Linea", "Linea")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("IdLinea");

                    b.HasOne("CallCenterBO.Data.Entidades.Profesor", "Profesor")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("IdProfesor")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.Profesor", b =>
                {
                    b.HasOne("CallCenterBO.Data.Entidades.EmpresaProfesor", "EmpresaProfesor")
                        .WithMany("Profesores")
                        .HasForeignKey("IdEmpresaProfesor");
                });

            modelBuilder.Entity("CallCenterBO.Data.Entidades.TopicSemanaTopics", b =>
                {
                    b.HasOne("CallCenterBO.Data.Entidades.SemanaTopics", "SemanaTopics")
                        .WithMany("TopicsSemanaTopics")
                        .HasForeignKey("IdSemanaTopics")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallCenterBO.Data.Entidades.Topic", "Topic")
                        .WithMany("TopicsSemanaTopics")
                        .HasForeignKey("IdTopic")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
