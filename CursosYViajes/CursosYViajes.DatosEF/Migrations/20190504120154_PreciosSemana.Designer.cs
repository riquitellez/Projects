// <auto-generated />
using System;
using CursosYViajes.DatosEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CursosYViajes.DatosEF.Migrations
{
    [DbContext(typeof(ContextoCursoYViajes))]
    [Migration("20190504120154_PreciosSemana")]
    partial class PreciosSemana
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CursosYViajes.DatosEF.Alumno", b =>
                {
                    b.Property<Guid>("IdAlumno")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DocumentoDeIdentidad")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("FechaDeAlta");

                    b.Property<DateTime?>("FechaDeBaja");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdAlumno");

                    b.ToTable("Alumnos");
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.Curso", b =>
                {
                    b.Property<Guid>("IdCurso")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FechaDeAlta");

                    b.Property<DateTime?>("FechaDeBaja");

                    b.Property<Guid>("IdPais");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("PrecioPorSemana");

                    b.HasKey("IdCurso");

                    b.HasIndex("IdPais");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.CursoPorAlumno", b =>
                {
                    b.Property<Guid>("IdCursoPorAlumno")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FechaDeAlta");

                    b.Property<DateTime?>("FechaDeBaja");

                    b.Property<Guid>("IdAlumno");

                    b.Property<Guid>("IdCurso");

                    b.HasKey("IdCursoPorAlumno");

                    b.HasIndex("IdAlumno");

                    b.HasIndex("IdCurso");

                    b.ToTable("CursosPorAlumno");
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.Pais", b =>
                {
                    b.Property<Guid>("IdPais")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdPais");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.PrecioHospedajePorCursoPorSemana", b =>
                {
                    b.Property<Guid>("IdPrecioHospedajePorCursoPorSemana")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdCurso");

                    b.Property<int>("IdTipoDeHospedaje");

                    b.Property<int>("NumSemana");

                    b.Property<double>("Precio");

                    b.HasKey("IdPrecioHospedajePorCursoPorSemana");

                    b.HasIndex("IdCurso");

                    b.HasIndex("IdTipoDeHospedaje");

                    b.ToTable("PrecioHospedajePorCursoPorSemanas");
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.PrecioPorCursoPorSemana", b =>
                {
                    b.Property<Guid>("IdPrecioPorCursoPorSemana")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdCurso");

                    b.Property<int>("NumSemana");

                    b.Property<double>("Precio");

                    b.HasKey("IdPrecioPorCursoPorSemana");

                    b.HasIndex("IdCurso");

                    b.ToTable("PrecioPorCursoPorSemana");
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.TipoHospedaje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TipoHospedaje");
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.Curso", b =>
                {
                    b.HasOne("CursosYViajes.DatosEF.Pais", "Pais")
                        .WithMany("Cursos")
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.CursoPorAlumno", b =>
                {
                    b.HasOne("CursosYViajes.DatosEF.Alumno", "Alumno")
                        .WithMany("CursosPorAlumno")
                        .HasForeignKey("IdAlumno")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CursosYViajes.DatosEF.Curso", "Curso")
                        .WithMany("AlumnosPorCurso")
                        .HasForeignKey("IdCurso")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.PrecioHospedajePorCursoPorSemana", b =>
                {
                    b.HasOne("CursosYViajes.DatosEF.Curso", "Curso")
                        .WithMany("PrecioPorHospedajesPorCursosPorSemanas")
                        .HasForeignKey("IdCurso")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CursosYViajes.DatosEF.TipoHospedaje", "TipoHospedaje")
                        .WithMany("PrecioPorHospedajesPorCursosPorSemanas")
                        .HasForeignKey("IdTipoDeHospedaje")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursosYViajes.DatosEF.PrecioPorCursoPorSemana", b =>
                {
                    b.HasOne("CursosYViajes.DatosEF.Curso", "Curso")
                        .WithMany("PrecioPorCursosPorSemanas")
                        .HasForeignKey("IdCurso")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
